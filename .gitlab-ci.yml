stages:
    - preevaluation
    - synthesis
    - benchmark
    - analysis
    - release

variables:
    TAG_NAME: cibuild-${CI_PIPELINE_IID}
    RELEASE_NAME: CI build ${CI_PIPELINE_IID}
    PACKAGE_REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic

default:
    before_script:
        - module reset
        - module load lang fpga devel intel/oneapi bittware/520n Boost CMake Julia
        - icpx --version
        - julia --version
        - julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'

workflow:
    rules:
        - if: $CI_COMMIT_TAG
          when: never           # Don't run the pipeline for tags
        - if: $CI_COMMIT_BRANCH == "continous_benchmarking"

documentation:
    stage: preevaluation
    tags:
        - docker-shared
    image: alpine
    before_script:
        - apk add --no-cache doxygen graphviz font-noto
    script:
        - doxygen
    artifacts:
        paths:
            - doxygen/html

unit test:
    stage: preevaluation
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p normal -t 0:10:00 -c 16 --mem 4G
    script:
        - mkdir -p build
        - cd build
        - cmake ..
        - make unit_test -j16
        - ./tests/unit_test

# ==========
# Convection
# ==========

convection synthesis:
    stage: synthesis
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p normal -q fpgasynthesis -t 1-00:00:00 -c 8 --mem 120G
    script:
        - mkdir -p build
        - cd build
        - cmake -DCMAKE_BUILD_TYPE=Release ..
        - make convection
        - cd examples/convection
        - tar -caf convection.tar.gz convection convection.prj/reports
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file convection.tar.gz "${PACKAGE_REGISTRY_URL}/convection/${TAG_NAME}/convection.tar.gz"'
    artifacts:
        when: always
        paths:
            - build/examples/convection/convection
            - build/examples/convection/convection.prj/reports
            - build/examples/convection/convection.tar.gz

convection benchmark:
    stage: benchmark
    needs: 
        - convection synthesis
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p fpga --constraint=bittware_520n_20.4.0_hpc -t 00:15:00
    script:
        - cd examples/convection
        - ./scripts/benchmark.jl default ../../build/examples/convection/convection
        - ./scripts/render_animation.jl out
    artifacts:
        paths:
            - examples/convection/out
            - examples/convection/animation.mp4
            - examples/convection/metrics.json
            - examples/convection/pseudo_transient_runtimes.csv

# ==================
# Hotspot (monotile)
# ==================

hotspot (monotile) synthesis:
    stage: synthesis
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p normal -q fpgasynthesis -t 1-00:00:00 -c 8 --mem 120G
    script:
        - mkdir -p build
        - cd build
        - cmake -DCMAKE_BUILD_TYPE=Release ..
        - make hotspot_monotile
        - cd examples/hotspot
        - tar -caf hotspot_monotile.tar.gz hotspot_monotile hotspot_monotile.prj/reports
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file hotspot_monotile.tar.gz "${PACKAGE_REGISTRY_URL}/hotspot_monotile/${TAG_NAME}/hotspot_monotile.tar.gz"'
    artifacts:
        when: always
        paths:
            - build/examples/convection/hotspot_monotile
            - build/examples/convection/hotspot_monotile.prj/reports
            - build/examples/convection/hotspot_monotile.tar.gz

hotspot (monotile) benchmark:
    stage: benchmark
    needs: 
        - hotspot (monotile) synthesis
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p fpga --constraint=bittware_520n_20.4.0_hpc -t 00:15:00
    script:
        - cd examples/hotspot
        - ./scripts/benchmark.jl ../../build/examples/hotspot/hotspot_monotile monotile
    artifacts:
        paths:
            - examples/hotspot/metrics.monotile.json

# ================
# Hotspot (tiling)
# ================

hotspot (tiling) synthesis:
    stage: synthesis
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p normal -q fpgasynthesis -t 1-00:00:00 -c 8 --mem 120G
    script:
        - mkdir -p build
        - cd build
        - cmake -DCMAKE_BUILD_TYPE=Release ..
        - make hotspot_tiling
        - cd examples/hotspot
        - tar -caf hotspot_tiling.tar.gz hotspot_tiling hotspot_tiling.prj/reports
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file hotspot_tiling.tar.gz "${PACKAGE_REGISTRY_URL}/hotspot_tiling/${TAG_NAME}/hotspot_tiling.tar.gz"'
    artifacts:
        when: always
        paths:
            - build/examples/convection/hotspot_tiling
            - build/examples/convection/hotspot_tiling.prj/reports
            - build/examples/convection/hotspot_tiling.tar.gz

hotspot (tiling) benchmark:
    stage: benchmark
    needs: 
        - hotspot (tiling) synthesis
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p fpga --constraint=bittware_520n_20.4.0_hpc -t 00:15:00
    script:
        - cd examples/hotspot
        - ./scripts/benchmark.jl ../../build/examples/hotspot/hotspot_tiling tiling
    artifacts:
        paths:
            - examples/hotspot/metrics.tiling.json

# =======
# Release
# =======

release:
    stage: release
    when: always
    tags:
        - noctua2
    variables:
        SCHEDULER_PARAMETERS: -A hpc-lco-kenter -p normal -c 8 --mem 2G -t 00:05:00
    script:
        - ./scripts/publish-release.sh ${RELEASE_NAME} ${TAG_NAME} ${CI_COMMIT_SHA}